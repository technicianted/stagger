// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination ../mocks/blockers.go -source types.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	types "straggler/pkg/config/types"
	types0 "straggler/pkg/controller/types"

	logr "github.com/go-logr/logr"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// MockObjectRecorder is a mock of ObjectRecorder interface.
type MockObjectRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockObjectRecorderMockRecorder
}

// MockObjectRecorderMockRecorder is the mock recorder for MockObjectRecorder.
type MockObjectRecorderMockRecorder struct {
	mock *MockObjectRecorder
}

// NewMockObjectRecorder creates a new mock instance.
func NewMockObjectRecorder(ctrl *gomock.Controller) *MockObjectRecorder {
	mock := &MockObjectRecorder{ctrl: ctrl}
	mock.recorder = &MockObjectRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectRecorder) EXPECT() *MockObjectRecorderMockRecorder {
	return m.recorder
}

// Logf mocks base method.
func (m *MockObjectRecorder) Logf(logger logr.Logger, v int, reason, format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{logger, v, reason, format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Logf", varargs...)
}

// Logf indicates an expected call of Logf.
func (mr *MockObjectRecorderMockRecorder) Logf(logger, v, reason, format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{logger, v, reason, format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logf", reflect.TypeOf((*MockObjectRecorder)(nil).Logf), varargs...)
}

// Normalf mocks base method.
func (m *MockObjectRecorder) Normalf(reason, format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{reason, format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Normalf", varargs...)
}

// Normalf indicates an expected call of Normalf.
func (mr *MockObjectRecorderMockRecorder) Normalf(reason, format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{reason, format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Normalf", reflect.TypeOf((*MockObjectRecorder)(nil).Normalf), varargs...)
}

// Warnf mocks base method.
func (m *MockObjectRecorder) Warnf(reason, format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{reason, format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockObjectRecorderMockRecorder) Warnf(reason, format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{reason, format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockObjectRecorder)(nil).Warnf), varargs...)
}

// MockObjectRecorderFactory is a mock of ObjectRecorderFactory interface.
type MockObjectRecorderFactory struct {
	ctrl     *gomock.Controller
	recorder *MockObjectRecorderFactoryMockRecorder
}

// MockObjectRecorderFactoryMockRecorder is the mock recorder for MockObjectRecorderFactory.
type MockObjectRecorderFactoryMockRecorder struct {
	mock *MockObjectRecorderFactory
}

// NewMockObjectRecorderFactory creates a new mock instance.
func NewMockObjectRecorderFactory(ctrl *gomock.Controller) *MockObjectRecorderFactory {
	mock := &MockObjectRecorderFactory{ctrl: ctrl}
	mock.recorder = &MockObjectRecorderFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectRecorderFactory) EXPECT() *MockObjectRecorderFactoryMockRecorder {
	return m.recorder
}

// RecorderForRootController mocks base method.
func (m *MockObjectRecorderFactory) RecorderForRootController(ctx context.Context, object runtime.Object, logger logr.Logger) (types0.ObjectRecorder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecorderForRootController", ctx, object, logger)
	ret0, _ := ret[0].(types0.ObjectRecorder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecorderForRootController indicates an expected call of RecorderForRootController.
func (mr *MockObjectRecorderFactoryMockRecorder) RecorderForRootController(ctx, object, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecorderForRootController", reflect.TypeOf((*MockObjectRecorderFactory)(nil).RecorderForRootController), ctx, object, logger)
}

// RecorderForRootControllerOrNull mocks base method.
func (m *MockObjectRecorderFactory) RecorderForRootControllerOrNull(ctx context.Context, object runtime.Object, logger logr.Logger) types0.ObjectRecorder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecorderForRootControllerOrNull", ctx, object, logger)
	ret0, _ := ret[0].(types0.ObjectRecorder)
	return ret0
}

// RecorderForRootControllerOrNull indicates an expected call of RecorderForRootControllerOrNull.
func (mr *MockObjectRecorderFactoryMockRecorder) RecorderForRootControllerOrNull(ctx, object, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecorderForRootControllerOrNull", reflect.TypeOf((*MockObjectRecorderFactory)(nil).RecorderForRootControllerOrNull), ctx, object, logger)
}

// MockPodClassifier is a mock of PodClassifier interface.
type MockPodClassifier struct {
	ctrl     *gomock.Controller
	recorder *MockPodClassifierMockRecorder
}

// MockPodClassifierMockRecorder is the mock recorder for MockPodClassifier.
type MockPodClassifierMockRecorder struct {
	mock *MockPodClassifier
}

// NewMockPodClassifier creates a new mock instance.
func NewMockPodClassifier(ctrl *gomock.Controller) *MockPodClassifier {
	mock := &MockPodClassifier{ctrl: ctrl}
	mock.recorder = &MockPodClassifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodClassifier) EXPECT() *MockPodClassifierMockRecorder {
	return m.recorder
}

// Classify mocks base method.
func (m *MockPodClassifier) Classify(podMeta v10.ObjectMeta, podSpec v1.PodSpec, logger logr.Logger) (*types0.PodClassification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Classify", podMeta, podSpec, logger)
	ret0, _ := ret[0].(*types0.PodClassification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Classify indicates an expected call of Classify.
func (mr *MockPodClassifierMockRecorder) Classify(podMeta, podSpec, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Classify", reflect.TypeOf((*MockPodClassifier)(nil).Classify), podMeta, podSpec, logger)
}

// ClassifyByGroupID mocks base method.
func (m *MockPodClassifier) ClassifyByGroupID(groupID string, logger logr.Logger) (*types0.PodClassification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClassifyByGroupID", groupID, logger)
	ret0, _ := ret[0].(*types0.PodClassification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClassifyByGroupID indicates an expected call of ClassifyByGroupID.
func (mr *MockPodClassifierMockRecorder) ClassifyByGroupID(groupID, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClassifyByGroupID", reflect.TypeOf((*MockPodClassifier)(nil).ClassifyByGroupID), groupID, logger)
}

// MockPodGroupStandingClassifier is a mock of PodGroupStandingClassifier interface.
type MockPodGroupStandingClassifier struct {
	ctrl     *gomock.Controller
	recorder *MockPodGroupStandingClassifierMockRecorder
}

// MockPodGroupStandingClassifierMockRecorder is the mock recorder for MockPodGroupStandingClassifier.
type MockPodGroupStandingClassifierMockRecorder struct {
	mock *MockPodGroupStandingClassifier
}

// NewMockPodGroupStandingClassifier creates a new mock instance.
func NewMockPodGroupStandingClassifier(ctrl *gomock.Controller) *MockPodGroupStandingClassifier {
	mock := &MockPodGroupStandingClassifier{ctrl: ctrl}
	mock.recorder = &MockPodGroupStandingClassifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodGroupStandingClassifier) EXPECT() *MockPodGroupStandingClassifierMockRecorder {
	return m.recorder
}

// ClassifyPodGroup mocks base method.
func (m *MockPodGroupStandingClassifier) ClassifyPodGroup(ctx context.Context, groupID string, logger logr.Logger) ([]v1.Pod, []v1.Pod, []v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClassifyPodGroup", ctx, groupID, logger)
	ret0, _ := ret[0].([]v1.Pod)
	ret1, _ := ret[1].([]v1.Pod)
	ret2, _ := ret[2].([]v1.Pod)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ClassifyPodGroup indicates an expected call of ClassifyPodGroup.
func (mr *MockPodGroupStandingClassifierMockRecorder) ClassifyPodGroup(ctx, groupID, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClassifyPodGroup", reflect.TypeOf((*MockPodGroupStandingClassifier)(nil).ClassifyPodGroup), ctx, groupID, logger)
}

// MockPodClassifierConfigurator is a mock of PodClassifierConfigurator interface.
type MockPodClassifierConfigurator struct {
	ctrl     *gomock.Controller
	recorder *MockPodClassifierConfiguratorMockRecorder
}

// MockPodClassifierConfiguratorMockRecorder is the mock recorder for MockPodClassifierConfigurator.
type MockPodClassifierConfiguratorMockRecorder struct {
	mock *MockPodClassifierConfigurator
}

// NewMockPodClassifierConfigurator creates a new mock instance.
func NewMockPodClassifierConfigurator(ctrl *gomock.Controller) *MockPodClassifierConfigurator {
	mock := &MockPodClassifierConfigurator{ctrl: ctrl}
	mock.recorder = &MockPodClassifierConfiguratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodClassifierConfigurator) EXPECT() *MockPodClassifierConfiguratorMockRecorder {
	return m.recorder
}

// AddConfig mocks base method.
func (m *MockPodClassifierConfigurator) AddConfig(config types.StaggerGroup, logger logr.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddConfig", config, logger)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddConfig indicates an expected call of AddConfig.
func (mr *MockPodClassifierConfiguratorMockRecorder) AddConfig(config, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConfig", reflect.TypeOf((*MockPodClassifierConfigurator)(nil).AddConfig), config, logger)
}

// RemoveConfig mocks base method.
func (m *MockPodClassifierConfigurator) RemoveConfig(name string, logger logr.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveConfig", name, logger)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveConfig indicates an expected call of RemoveConfig.
func (mr *MockPodClassifierConfiguratorMockRecorder) RemoveConfig(name, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveConfig", reflect.TypeOf((*MockPodClassifierConfigurator)(nil).RemoveConfig), name, logger)
}

// UpdateConfig mocks base method.
func (m *MockPodClassifierConfigurator) UpdateConfig(config types.StaggerGroup, logger logr.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfig", config, logger)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfig indicates an expected call of UpdateConfig.
func (mr *MockPodClassifierConfiguratorMockRecorder) UpdateConfig(config, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockPodClassifierConfigurator)(nil).UpdateConfig), config, logger)
}

// MockAdmissionFlightTracker is a mock of AdmissionFlightTracker interface.
type MockAdmissionFlightTracker struct {
	ctrl     *gomock.Controller
	recorder *MockAdmissionFlightTrackerMockRecorder
}

// MockAdmissionFlightTrackerMockRecorder is the mock recorder for MockAdmissionFlightTracker.
type MockAdmissionFlightTrackerMockRecorder struct {
	mock *MockAdmissionFlightTracker
}

// NewMockAdmissionFlightTracker creates a new mock instance.
func NewMockAdmissionFlightTracker(ctrl *gomock.Controller) *MockAdmissionFlightTracker {
	mock := &MockAdmissionFlightTracker{ctrl: ctrl}
	mock.recorder = &MockAdmissionFlightTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdmissionFlightTracker) EXPECT() *MockAdmissionFlightTrackerMockRecorder {
	return m.recorder
}

// Track mocks base method.
func (m *MockAdmissionFlightTracker) Track(key string, object v10.ObjectMeta, logger logr.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Track", key, object, logger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Track indicates an expected call of Track.
func (mr *MockAdmissionFlightTrackerMockRecorder) Track(key, object, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Track", reflect.TypeOf((*MockAdmissionFlightTracker)(nil).Track), key, object, logger)
}

// WaitOne mocks base method.
func (m *MockAdmissionFlightTracker) WaitOne(ctx context.Context, key string, logger logr.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitOne", ctx, key, logger)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitOne indicates an expected call of WaitOne.
func (mr *MockAdmissionFlightTrackerMockRecorder) WaitOne(ctx, key, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitOne", reflect.TypeOf((*MockAdmissionFlightTracker)(nil).WaitOne), ctx, key, logger)
}
