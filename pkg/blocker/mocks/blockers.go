// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination ../mocks/blockers.go -source types.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	logr "github.com/go-logr/logr"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockPodBlocker is a mock of PodBlocker interface.
type MockPodBlocker struct {
	ctrl     *gomock.Controller
	recorder *MockPodBlockerMockRecorder
}

// MockPodBlockerMockRecorder is the mock recorder for MockPodBlocker.
type MockPodBlockerMockRecorder struct {
	mock *MockPodBlocker
}

// NewMockPodBlocker creates a new mock instance.
func NewMockPodBlocker(ctrl *gomock.Controller) *MockPodBlocker {
	mock := &MockPodBlocker{ctrl: ctrl}
	mock.recorder = &MockPodBlockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodBlocker) EXPECT() *MockPodBlockerMockRecorder {
	return m.recorder
}

// Block mocks base method.
func (m *MockPodBlocker) Block(podSpec *v1.PodSpec, logger logr.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", podSpec, logger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Block indicates an expected call of Block.
func (mr *MockPodBlockerMockRecorder) Block(podSpec, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockPodBlocker)(nil).Block), podSpec, logger)
}

// IsBlocked mocks base method.
func (m *MockPodBlocker) IsBlocked(podSpec *v1.PodSpec, logger logr.Logger) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlocked", podSpec, logger)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBlocked indicates an expected call of IsBlocked.
func (mr *MockPodBlockerMockRecorder) IsBlocked(podSpec, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlocked", reflect.TypeOf((*MockPodBlocker)(nil).IsBlocked), podSpec, logger)
}

// Unblock mocks base method.
func (m *MockPodBlocker) Unblock(podSpec *v1.PodSpec, logger logr.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unblock", podSpec, logger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unblock indicates an expected call of Unblock.
func (mr *MockPodBlockerMockRecorder) Unblock(podSpec, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unblock", reflect.TypeOf((*MockPodBlocker)(nil).Unblock), podSpec, logger)
}
